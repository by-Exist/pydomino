{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"PyDomino PyDomino\ub294 \uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d, \ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98, \ucee4\ub9e8\ub4dc \ub514\uc790\uc778 \ud328\ud134\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc5c8\uc2b5\ub2c8\ub2e4. \uc11c\ube44\uc2a4 \ub85c\uc9c1\uc744 \ube14\ub7ed \ub2e8\uc704\ub85c \uad6c\uc870\ud654\ud569\ub2c8\ub2e4. \ubb38\uc11c : https://by-exist.github.io/pydomino \uc18c\uc2a4\ucf54\ub4dc : https://github.com/by-Exist/pydomino \uc124\uce58 pip\ub97c \ud1b5\ud574 \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc791\uc5c5\uc911...) pip install pydomino \uc608\uc81c test.py import asyncio from typing import Protocol from pydomino import Block , Domino , touch # Port class IEmailSender ( Protocol ): def send ( self , __to : str , __body : str ): ... # Blocks class CreateUser ( Block ): email : str password : str def fall_down ( self ): touch ( UserCreated ( email = self . email )) class UserCreated ( Block ): email : str def fall_down ( self ): touch ( SendMail ( to = self . email , body = \"Thank you for joining us.\" )) class SendMail ( Block ): to : str body : str def fall_down ( self , email_sender : IEmailSender ): email_sender . send ( self . to , self . body ) # Adapter class FakeEmailSender ( IEmailSender ): def send ( self , __to : str , __body : str ): print ( f \"Email sended. (to: { __to } , body: { __body } )\" ) # Domino domino = Domino () domino . place ( CreateUser ) domino . place ( UserCreated ) domino . place ( SendMail , email_sender = FakeEmailSender ()) # Inject Dependency async def main (): block = CreateUser ( email = \"some_user@example.com\" , password = \"password\" ) # CreateUser -> UserCreated -> SendMail await domino . start ( block ) asyncio . run ( main ()) $ python test.py Email sended. (to: some_user@example.com, body: Thank you for joining us.)","title":"PyDomino"},{"location":"#pydomino","text":"PyDomino\ub294 \uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d, \ud5e5\uc0ac\uace0\ub0a0 \uc544\ud0a4\ud14d\ucc98, \ucee4\ub9e8\ub4dc \ub514\uc790\uc778 \ud328\ud134\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc5c8\uc2b5\ub2c8\ub2e4. \uc11c\ube44\uc2a4 \ub85c\uc9c1\uc744 \ube14\ub7ed \ub2e8\uc704\ub85c \uad6c\uc870\ud654\ud569\ub2c8\ub2e4. \ubb38\uc11c : https://by-exist.github.io/pydomino \uc18c\uc2a4\ucf54\ub4dc : https://github.com/by-Exist/pydomino","title":"PyDomino"},{"location":"#_1","text":"pip\ub97c \ud1b5\ud574 \uc124\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. (\uc791\uc5c5\uc911...) pip install pydomino","title":"\uc124\uce58"},{"location":"#_2","text":"test.py import asyncio from typing import Protocol from pydomino import Block , Domino , touch # Port class IEmailSender ( Protocol ): def send ( self , __to : str , __body : str ): ... # Blocks class CreateUser ( Block ): email : str password : str def fall_down ( self ): touch ( UserCreated ( email = self . email )) class UserCreated ( Block ): email : str def fall_down ( self ): touch ( SendMail ( to = self . email , body = \"Thank you for joining us.\" )) class SendMail ( Block ): to : str body : str def fall_down ( self , email_sender : IEmailSender ): email_sender . send ( self . to , self . body ) # Adapter class FakeEmailSender ( IEmailSender ): def send ( self , __to : str , __body : str ): print ( f \"Email sended. (to: { __to } , body: { __body } )\" ) # Domino domino = Domino () domino . place ( CreateUser ) domino . place ( UserCreated ) domino . place ( SendMail , email_sender = FakeEmailSender ()) # Inject Dependency async def main (): block = CreateUser ( email = \"some_user@example.com\" , password = \"password\" ) # CreateUser -> UserCreated -> SendMail await domino . start ( block ) asyncio . run ( main ()) $ python test.py Email sended. (to: some_user@example.com, body: Thank you for joining us.)","title":"\uc608\uc81c"},{"location":"example/common/","text":"Common \uc5ec\ub7ec msa \uc11c\ube44\uc2a4\uc5d0\uc11c \ud65c\uc6a9\ub420 \uacf5\ud1b5 \ubaa8\ub4c8 common\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uba54\uc138\uc9c0 \uc2dc\uc2a4\ud15c \ud074\ub77c\uc774\uc5b8\ud2b8, \uc774\uba54\uc77c \uc804\uc1a1, \ud30c\uc77c \uc800\uc7a5 \ub4f1\uc758 \uc720\ud2f8\uc131 \ubaa8\ub4c8\uc744 \uc815\uc758\ud558\uc5ec \uacf5\uc720\ud558\uba70 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Directory Structure \ub514\ub809\ud1a0\ub9ac \uad6c\uc870\uc5d0 \ub300\ud574 \uac04\ub7b5\ud788 \uc124\uba85\ub4dc\ub9ac\uace0 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. common\uc5d0 \ud3ec\ud568\ub420 \uc8fc\uc694 \ubaa8\ub4c8\uc740 message\uc785\ub2c8\ub2e4. __init__.py \ud30c\uc77c\uc740 \uac00\ub3c5\uc131\uc744 \uc704\ud574 \uc81c\uc678\ud558\uc600\uc2b5\ub2c8\ub2e4. common message message.py ports producer.py consumer.py adapters producer aiokafka_.py consumer aiokafka_.py common.message.message.py message \uac1d\uccb4\ub294 id, type, key, value \uc18d\uc131\uc744 \ubcf4\uc720\ud569\ub2c8\ub2e4. id: \uba54\uc138\uc9c0\uc758 \uace0\uc720 id\uc785\ub2c8\ub2e4. \uc804\uc5ed\uc801\uc73c\ub85c \uace0\uc720\ud558\ub3c4\ub85d UUID\ub97c \ud65c\uc6a9\ud569\ub2c8\ub2e4. \ud574\ub2f9 \uac12\uc740 \uba54\uc138\uc9c0\uc758 \uc911\ubcf5 \ucc98\ub9ac\ub97c \ubc29\uc9c0\ud558\ub294\ub370\uc5d0 \ud65c\uc6a9\ub429\ub2c8\ub2e4. type: \uba54\uc138\uc9c0\uc758 type\uc785\ub2c8\ub2e4. topic\uc744 \ub300\ubd84\ub958, type\uc744 \uc18c\ubd84\ub958\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. key: \uba54\uc138\uc9c0\uc758 \uc21c\uc11c \ubcf4\uc7a5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \uac12\uc785\ub2c8\ub2e4. \uc8fc\ub85c \ub3c4\uba54\uc778 \uac1d\uccb4\uc758 id \uac12\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. value: \uba54\uc138\uc9c0\uc758 body\uc785\ub2c8\ub2e4. from uuid import UUID class Message : __slots__ = ( \"id\" , \"type\" , \"key\" , \"value\" ) def __init__ ( self , id : UUID , type : str , key : str , value : str ): self . id = id self . type = type self . key = key self . value = value common.message.ports.producer.py MessageProducer, Serializable \ud504\ub85c\ud1a0\ucf5c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. from typing import Protocol from ..message import Message class Serializable ( Protocol ): def to_message ( self ) -> Message : ... class MessageProducer ( Protocol ): async def send ( self , message : Message ) -> None : ... common.message.ports.consumer.py MessageConsumer, Deserializable \ud504\ub85c\ud1a0\ucf5c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. from typing import Protocol from typing_extensions import Self from ..message import Message class Deserializable ( Protocol ): @classmethod def from_message ( cls , message : Message ) -> Self : ... class MessageConsumer : def subscribe ( self , topic : str ): ... async def receive ( self ) -> Message : ... async def receive_many ( self , timeout_ms : int ) -> list [ Message ]: ... async def acknowledge ( self ) -> None : ... common.message.adapter.producer.aiokafka_.py aiokafka \ub294 Apache Kafka \uc2dc\uc2a4\ud15c\uc744 python\uc758 \ube44\ub3d9\uae30 \ubb38\ubc95\uc73c\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ub41c \uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. aiokafka\ub97c \ud65c\uc6a9\ud558\uc5ec MessageProducer \ud504\ub85c\ud1a0\ucf5c\uc744 \ub9cc\uc871\ud558\ub294 AIOKafkaMessageProducer\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4. from typing import Callable , Iterable from aiokafka import AIOKafkaProducer as _AIOKafkaProducer # type: ignore from ...ports import MessageProducer from ...message import Message _str_to_bytes : Callable [[ str ], bytes ] = lambda s : s . encode ( \"utf-8\" ) class AIOKafkaMessageProducer ( MessageProducer ): def __init__ ( self , topic : str , bootstrap_servers : str | Iterable [ str ]): self . _topic = topic self . _producer = _AIOKafkaProducer ( ** dict ( bootstrap_servers = bootstrap_servers if isinstance ( bootstrap_servers , str ) else \", \" . join ( bootstrap_servers ), key_serializer = _str_to_bytes , value_serializer = _str_to_bytes , ) ) async def start ( self ): await self . _producer . start () async def stop ( self ): await self . _producer . stop () async def send ( self , message : Message ) -> None : await self . _producer . send_and_wait ( # type: ignore topic = self . _topic , headers = [ ( \"id\" , message . id . hex . encode ( \"utf-8\" )), ( \"type\" , message . type . encode ( \"utf-8\" )), ], key = message . key , value = message . value , ) common.message.adapter.consumer.aiokafka_.py aiokafka\ub97c \ud65c\uc6a9\ud558\uc5ec MessageConsumer \ud504\ub85c\ud1a0\ucf5c\uc744 \ub9cc\uc871\ud558\ub294 AIOKafkaMessageConsumer\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4. from typing import Any , Iterable , Protocol , Sequence from uuid import UUID from aiokafka import AIOKafkaConsumer as _AIOKafkaConsumer # type: ignore from ...message import Message from ...ports import MessageConsumer def _bytes_to_str ( b : bytes ) -> str : return b . decode ( \"utf-8\" ) class ConsumerRecord ( Protocol ): # https://aiokafka.readthedocs.io/en/stable/api.html#aiokafka.structs.ConsumerRecord topic : str headers : Sequence [ tuple [ str , bytes ]] key : str value : str class AIOKafkaMessageConsumer ( MessageConsumer ): def __init__ ( self , bootstrap_servers : str | Iterable [ str ], group_id : str , ): self . _topics : set [ str ] = set () self . _consumer = _AIOKafkaConsumer ( * self . _topics , bootstrap_servers = bootstrap_servers if isinstance ( bootstrap_servers , str ) else \", \" . join ( bootstrap_servers ), group_id = group_id , key_deserializer = _bytes_to_str , value_deserializer = _bytes_to_str , enable_auto_commit = False , auto_offset_reset = \"earliest\" , retry_backoff_ms = 500 , ) async def start ( self ): await self . _consumer . start () async def stop ( self ): await self . _consumer . stop () def subscribe ( self , * topic : str ): self . _topics . update ( topic ) def _try_convert_to_message ( self , record : ConsumerRecord ) -> Message | None : header = { k : v . decode ( \"utf-8\" ) for k , v in record . headers } msg_id , msg_type = header . get ( \"id\" , \"\" ), header . get ( \"type\" , \"\" ) if not msg_id or not msg_type : return msg = Message ( UUID ( msg_id ), msg_type , record . key , record . value ) return msg async def receive ( self ) -> Message : while True : record : ConsumerRecord = await self . _consumer . getone () # type: ignore msg = self . _try_convert_to_message ( record ) if not msg : continue return msg async def receive_many ( self , timeout_ms : int ) -> list [ Message ]: data : dict [ Any , list [ ConsumerRecord ]] = await self . _consumer . getmany ( timeout_ms = timeout_ms ) # type: ignore results : list [ Message ] = [] for records in data . values (): for record in records : msg = self . _try_convert_to_message ( record ) if not msg : continue results . append ( msg ) return results async def acknowledge ( self ) -> None : await self . _consumer . commit () # type: ignore","title":"Common"},{"location":"example/common/#common","text":"\uc5ec\ub7ec msa \uc11c\ube44\uc2a4\uc5d0\uc11c \ud65c\uc6a9\ub420 \uacf5\ud1b5 \ubaa8\ub4c8 common\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uba54\uc138\uc9c0 \uc2dc\uc2a4\ud15c \ud074\ub77c\uc774\uc5b8\ud2b8, \uc774\uba54\uc77c \uc804\uc1a1, \ud30c\uc77c \uc800\uc7a5 \ub4f1\uc758 \uc720\ud2f8\uc131 \ubaa8\ub4c8\uc744 \uc815\uc758\ud558\uc5ec \uacf5\uc720\ud558\uba70 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"Common"},{"location":"example/common/#directory-structure","text":"\ub514\ub809\ud1a0\ub9ac \uad6c\uc870\uc5d0 \ub300\ud574 \uac04\ub7b5\ud788 \uc124\uba85\ub4dc\ub9ac\uace0 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4. common\uc5d0 \ud3ec\ud568\ub420 \uc8fc\uc694 \ubaa8\ub4c8\uc740 message\uc785\ub2c8\ub2e4. __init__.py \ud30c\uc77c\uc740 \uac00\ub3c5\uc131\uc744 \uc704\ud574 \uc81c\uc678\ud558\uc600\uc2b5\ub2c8\ub2e4. common message message.py ports producer.py consumer.py adapters producer aiokafka_.py consumer aiokafka_.py","title":"Directory Structure"},{"location":"example/common/#commonmessagemessagepy","text":"message \uac1d\uccb4\ub294 id, type, key, value \uc18d\uc131\uc744 \ubcf4\uc720\ud569\ub2c8\ub2e4. id: \uba54\uc138\uc9c0\uc758 \uace0\uc720 id\uc785\ub2c8\ub2e4. \uc804\uc5ed\uc801\uc73c\ub85c \uace0\uc720\ud558\ub3c4\ub85d UUID\ub97c \ud65c\uc6a9\ud569\ub2c8\ub2e4. \ud574\ub2f9 \uac12\uc740 \uba54\uc138\uc9c0\uc758 \uc911\ubcf5 \ucc98\ub9ac\ub97c \ubc29\uc9c0\ud558\ub294\ub370\uc5d0 \ud65c\uc6a9\ub429\ub2c8\ub2e4. type: \uba54\uc138\uc9c0\uc758 type\uc785\ub2c8\ub2e4. topic\uc744 \ub300\ubd84\ub958, type\uc744 \uc18c\ubd84\ub958\ub85c \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. key: \uba54\uc138\uc9c0\uc758 \uc21c\uc11c \ubcf4\uc7a5\uc744 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \uac12\uc785\ub2c8\ub2e4. \uc8fc\ub85c \ub3c4\uba54\uc778 \uac1d\uccb4\uc758 id \uac12\uc758 \ubb38\uc790\uc5f4 \ud45c\ud604\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. value: \uba54\uc138\uc9c0\uc758 body\uc785\ub2c8\ub2e4. from uuid import UUID class Message : __slots__ = ( \"id\" , \"type\" , \"key\" , \"value\" ) def __init__ ( self , id : UUID , type : str , key : str , value : str ): self . id = id self . type = type self . key = key self . value = value","title":"common.message.message.py"},{"location":"example/common/#commonmessageportsproducerpy","text":"MessageProducer, Serializable \ud504\ub85c\ud1a0\ucf5c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. from typing import Protocol from ..message import Message class Serializable ( Protocol ): def to_message ( self ) -> Message : ... class MessageProducer ( Protocol ): async def send ( self , message : Message ) -> None : ...","title":"common.message.ports.producer.py"},{"location":"example/common/#commonmessageportsconsumerpy","text":"MessageConsumer, Deserializable \ud504\ub85c\ud1a0\ucf5c\uc744 \uc815\uc758\ud569\ub2c8\ub2e4. from typing import Protocol from typing_extensions import Self from ..message import Message class Deserializable ( Protocol ): @classmethod def from_message ( cls , message : Message ) -> Self : ... class MessageConsumer : def subscribe ( self , topic : str ): ... async def receive ( self ) -> Message : ... async def receive_many ( self , timeout_ms : int ) -> list [ Message ]: ... async def acknowledge ( self ) -> None : ...","title":"common.message.ports.consumer.py"},{"location":"example/common/#commonmessageadapterproduceraiokafka_py","text":"aiokafka \ub294 Apache Kafka \uc2dc\uc2a4\ud15c\uc744 python\uc758 \ube44\ub3d9\uae30 \ubb38\ubc95\uc73c\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\ub3c4\ub85d \uad6c\uc131\ub41c \uc624\ud508\uc18c\uc2a4 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. aiokafka\ub97c \ud65c\uc6a9\ud558\uc5ec MessageProducer \ud504\ub85c\ud1a0\ucf5c\uc744 \ub9cc\uc871\ud558\ub294 AIOKafkaMessageProducer\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4. from typing import Callable , Iterable from aiokafka import AIOKafkaProducer as _AIOKafkaProducer # type: ignore from ...ports import MessageProducer from ...message import Message _str_to_bytes : Callable [[ str ], bytes ] = lambda s : s . encode ( \"utf-8\" ) class AIOKafkaMessageProducer ( MessageProducer ): def __init__ ( self , topic : str , bootstrap_servers : str | Iterable [ str ]): self . _topic = topic self . _producer = _AIOKafkaProducer ( ** dict ( bootstrap_servers = bootstrap_servers if isinstance ( bootstrap_servers , str ) else \", \" . join ( bootstrap_servers ), key_serializer = _str_to_bytes , value_serializer = _str_to_bytes , ) ) async def start ( self ): await self . _producer . start () async def stop ( self ): await self . _producer . stop () async def send ( self , message : Message ) -> None : await self . _producer . send_and_wait ( # type: ignore topic = self . _topic , headers = [ ( \"id\" , message . id . hex . encode ( \"utf-8\" )), ( \"type\" , message . type . encode ( \"utf-8\" )), ], key = message . key , value = message . value , )","title":"common.message.adapter.producer.aiokafka_.py"},{"location":"example/common/#commonmessageadapterconsumeraiokafka_py","text":"aiokafka\ub97c \ud65c\uc6a9\ud558\uc5ec MessageConsumer \ud504\ub85c\ud1a0\ucf5c\uc744 \ub9cc\uc871\ud558\ub294 AIOKafkaMessageConsumer\ub97c \uad6c\ud604\ud569\ub2c8\ub2e4. from typing import Any , Iterable , Protocol , Sequence from uuid import UUID from aiokafka import AIOKafkaConsumer as _AIOKafkaConsumer # type: ignore from ...message import Message from ...ports import MessageConsumer def _bytes_to_str ( b : bytes ) -> str : return b . decode ( \"utf-8\" ) class ConsumerRecord ( Protocol ): # https://aiokafka.readthedocs.io/en/stable/api.html#aiokafka.structs.ConsumerRecord topic : str headers : Sequence [ tuple [ str , bytes ]] key : str value : str class AIOKafkaMessageConsumer ( MessageConsumer ): def __init__ ( self , bootstrap_servers : str | Iterable [ str ], group_id : str , ): self . _topics : set [ str ] = set () self . _consumer = _AIOKafkaConsumer ( * self . _topics , bootstrap_servers = bootstrap_servers if isinstance ( bootstrap_servers , str ) else \", \" . join ( bootstrap_servers ), group_id = group_id , key_deserializer = _bytes_to_str , value_deserializer = _bytes_to_str , enable_auto_commit = False , auto_offset_reset = \"earliest\" , retry_backoff_ms = 500 , ) async def start ( self ): await self . _consumer . start () async def stop ( self ): await self . _consumer . stop () def subscribe ( self , * topic : str ): self . _topics . update ( topic ) def _try_convert_to_message ( self , record : ConsumerRecord ) -> Message | None : header = { k : v . decode ( \"utf-8\" ) for k , v in record . headers } msg_id , msg_type = header . get ( \"id\" , \"\" ), header . get ( \"type\" , \"\" ) if not msg_id or not msg_type : return msg = Message ( UUID ( msg_id ), msg_type , record . key , record . value ) return msg async def receive ( self ) -> Message : while True : record : ConsumerRecord = await self . _consumer . getone () # type: ignore msg = self . _try_convert_to_message ( record ) if not msg : continue return msg async def receive_many ( self , timeout_ms : int ) -> list [ Message ]: data : dict [ Any , list [ ConsumerRecord ]] = await self . _consumer . getmany ( timeout_ms = timeout_ms ) # type: ignore results : list [ Message ] = [] for records in data . values (): for record in records : msg = self . _try_convert_to_message ( record ) if not msg : continue results . append ( msg ) return results async def acknowledge ( self ) -> None : await self . _consumer . commit () # type: ignore","title":"common.message.adapter.consumer.aiokafka_.py"},{"location":"example/event_storming/","text":"Event Stoming Event Stoming\uc740 \uc5ec\ub7ec \uad00\uacc4\uc790\ub4e4\uc774 \ubaa8\uc5ec \ubcf5\uc7a1\ud55c \ube44\uc988\ub2c8\uc2a4 \ub3c4\uba54\uc778\uc744 \ud0d0\uc0c9\ud558\ub294 \uc6cc\ud06c\uc20d \ud615\ud0dc\ub85c \uc9c4\ud589\ub429\ub2c8\ub2e4. \uc608\uc81c \uc694\uad6c\uc0ac\ud56d\uc744 \ubc14\ud0d5\uc73c\ub85c \uc11c\ube44\uc2a4\ub97c \uc124\uacc4\ud558\uace0, \uac01 \uc11c\ube44\uc2a4\ub4e4\uc774 \ud611\uc5c5\ud558\ub294 \uacfc\uc815\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. \uc608\uc81c \uc694\uad6c\uc0ac\ud56d \uc0ac\uc6a9\uc790\uac00 \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud569\ub2c8\ub2e4. \ud30c\uc77c\uc774 \uc5c5\ub85c\ub4dc \ub420 \ub54c \ub9c8\ub2e4 \ud30c\uc77c\uc758 \uc774\ub984\uc744 \ud65c\uc6a9\ud574 \ud30c\uc77c\uc758 \uc704\uce58\ub97c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc \ub41c \ud30c\uc77c\uc774 \uc601\uc0c1\uc77c \uacbd\uc6b0, \ud574\ub2f9 \ud30c\uc77c\uc744 \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac\ub41c \ube44\ub514\uc624 \ud30c\uc77c\uc740 url\uc774 \ucd94\uac00\ub429\ub2c8\ub2e4. \ub300\uc26c\ubcf4\ub4dc\uc5d0\ub294 \uc5c5\ub85c\ub4dc \ud55c \ud30c\uc77c\uc758 \uc0c1\ud0dc(\ud30c\uc77c \ud06c\uae30, \ud30c\uc77c\uba85, \uc778\ub371\uc2a4 \uc5ec\ubd80, \ube44\ub514\uc624 \uc5c5\ub85c\ub4dc \uc5ec\ubd80, \ube44\ub514\uc624 url, ...) \uc815\ubcf4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \uad6c\uc131\uc694\uc18c Command (Blue): \uc678\ubd80\uc5d0\uc11c \uc9c1\uc811\uc801\uc73c\ub85c \uc694\uccad\ub418\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Event (Orange): \uc5b4\ub5a0\ud55c \uc77c\uc774 \uc218\ud589/\ubc1c\uc0dd\ud558\uc600\uc74c\uc744 \uc54c\ub9ac\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Policy (Purple): \uc2dc\uc2a4\ud15c \ub0b4\ubd80\uc5d0\uc11c \uc694\uccad\ub418\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Aggregate (Yellow): \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uad00\ub9ac\ud574\uc57c \ud558\ub294 \ub3c4\uba54\uc778 \uac1d\uccb4\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. ReadModel (Green): \uc77d\uae30 \uc804\uc6a9 \ubaa8\ub378\uc785\ub2c8\ub2e4. Bounded Context (Black line): \uc11c\ube44\uc2a4\ub97c \ub098\ub204\ub294 \ub2e8\uc704\uc785\ub2c8\ub2e4. Pub/Sub Line (Black Arrow): A\uac00 B\ub97c \ud2b8\ub9ac\uac70\ud55c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc124\uacc4 \uc704\uc758 \uc694\uad6c\uc0ac\ud56d\uc744 \ud1a0\ub300\ub85c event stoming\uc744 \uc218\ud589\ud55c \uacb0\uacfc\ubb3c\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Domino! PyDomino\ub294 \uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d\uc758 \uacb0\uacfc\ubb3c\uc774 \ub3c4\ubbf8\ub178 \uad6c\uc870\uc640 \uc720\uc0ac\ud558\ub2e4\ub294 \uc810\uc5d0 \ucc29\uc548\ud558\uc5ec \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4! \uc124\uba85 \uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d \uacfc\uc815\uc744 \ud1b5\ud574 4\uac1c\uc758 \ub9c8\uc774\ud06c\ub85c \uc11c\ube44\uc2a4\uac00 \ub3c4\ucd9c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. Drive: \uc0ac\uc6a9\uc790\uc758 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \ucc98\ub9ac\ud558\uace0 \uad00\ub9ac\ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. VideoProcess: \uc5c5\ub85c\ub4dc\ub41c \uc601\uc0c1 \ud30c\uc77c\uc744 \uc2a4\ud2b8\ub9ac\ubc0d\ud654\ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Indexer: \ud30c\uc77c \uc704\uce58 \ubc0f \uac80\uc0c9\uc744 \ub3d5\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Dashboard: \uc5ec\ub7ec \uc11c\ube44\uc2a4\uc5d0 \ud30c\ud3b8\ud654\ub41c \uc815\ubcf4\ub97c \ud55c \uacf3\uc5d0 \ubaa8\uc544 \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. \uc55e\uc73c\ub85c \uac01\uac01\uc758 \uc11c\ube44\uc2a4\ub97c \uad6c\ud604\ud558\uae30 \uc804\uc5d0, Repository Pattern\uc774\ub780 \ubb34\uc5c7\uc778\uc9c0, Message\ub97c \uc804\ub2ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubb34\uc5c7\uc774 \ud544\uc694\ud55c\uc9c0, \uac01 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \uae30\ubcf8 \ud15c\ud50c\ub9bf\uc740 \uc5b4\ub5bb\uac8c \uad6c\uc131\ub418\ub294\uc9c0 \uc0b4\ud3b4\ubcf8 \ud6c4 \uad6c\ud604\uc744 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Event Stoming"},{"location":"example/event_storming/#event-stoming","text":"Event Stoming\uc740 \uc5ec\ub7ec \uad00\uacc4\uc790\ub4e4\uc774 \ubaa8\uc5ec \ubcf5\uc7a1\ud55c \ube44\uc988\ub2c8\uc2a4 \ub3c4\uba54\uc778\uc744 \ud0d0\uc0c9\ud558\ub294 \uc6cc\ud06c\uc20d \ud615\ud0dc\ub85c \uc9c4\ud589\ub429\ub2c8\ub2e4. \uc608\uc81c \uc694\uad6c\uc0ac\ud56d\uc744 \ubc14\ud0d5\uc73c\ub85c \uc11c\ube44\uc2a4\ub97c \uc124\uacc4\ud558\uace0, \uac01 \uc11c\ube44\uc2a4\ub4e4\uc774 \ud611\uc5c5\ud558\ub294 \uacfc\uc815\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.","title":"Event Stoming"},{"location":"example/event_storming/#_1","text":"\uc0ac\uc6a9\uc790\uac00 \ud30c\uc77c\uc744 \uc5c5\ub85c\ub4dc\ud569\ub2c8\ub2e4. \ud30c\uc77c\uc774 \uc5c5\ub85c\ub4dc \ub420 \ub54c \ub9c8\ub2e4 \ud30c\uc77c\uc758 \uc774\ub984\uc744 \ud65c\uc6a9\ud574 \ud30c\uc77c\uc758 \uc704\uce58\ub97c \uc778\ub371\uc2f1\ud569\ub2c8\ub2e4. \uc5c5\ub85c\ub4dc \ub41c \ud30c\uc77c\uc774 \uc601\uc0c1\uc77c \uacbd\uc6b0, \ud574\ub2f9 \ud30c\uc77c\uc744 \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac\ud569\ub2c8\ub2e4. \uc2a4\ud2b8\ub9ac\ubc0d \ucc98\ub9ac\ub41c \ube44\ub514\uc624 \ud30c\uc77c\uc740 url\uc774 \ucd94\uac00\ub429\ub2c8\ub2e4. \ub300\uc26c\ubcf4\ub4dc\uc5d0\ub294 \uc5c5\ub85c\ub4dc \ud55c \ud30c\uc77c\uc758 \uc0c1\ud0dc(\ud30c\uc77c \ud06c\uae30, \ud30c\uc77c\uba85, \uc778\ub371\uc2a4 \uc5ec\ubd80, \ube44\ub514\uc624 \uc5c5\ub85c\ub4dc \uc5ec\ubd80, \ube44\ub514\uc624 url, ...) \uc815\ubcf4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.","title":"\uc608\uc81c \uc694\uad6c\uc0ac\ud56d"},{"location":"example/event_storming/#_2","text":"Command (Blue): \uc678\ubd80\uc5d0\uc11c \uc9c1\uc811\uc801\uc73c\ub85c \uc694\uccad\ub418\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Event (Orange): \uc5b4\ub5a0\ud55c \uc77c\uc774 \uc218\ud589/\ubc1c\uc0dd\ud558\uc600\uc74c\uc744 \uc54c\ub9ac\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Policy (Purple): \uc2dc\uc2a4\ud15c \ub0b4\ubd80\uc5d0\uc11c \uc694\uccad\ub418\ub294 \uc694\uc18c\uc785\ub2c8\ub2e4. Aggregate (Yellow): \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uad00\ub9ac\ud574\uc57c \ud558\ub294 \ub3c4\uba54\uc778 \uac1d\uccb4\uc758 \uc774\ub984\uc785\ub2c8\ub2e4. ReadModel (Green): \uc77d\uae30 \uc804\uc6a9 \ubaa8\ub378\uc785\ub2c8\ub2e4. Bounded Context (Black line): \uc11c\ube44\uc2a4\ub97c \ub098\ub204\ub294 \ub2e8\uc704\uc785\ub2c8\ub2e4. Pub/Sub Line (Black Arrow): A\uac00 B\ub97c \ud2b8\ub9ac\uac70\ud55c\ub2e4\ub294 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.","title":"\uad6c\uc131\uc694\uc18c"},{"location":"example/event_storming/#_3","text":"\uc704\uc758 \uc694\uad6c\uc0ac\ud56d\uc744 \ud1a0\ub300\ub85c event stoming\uc744 \uc218\ud589\ud55c \uacb0\uacfc\ubb3c\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Domino! PyDomino\ub294 \uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d\uc758 \uacb0\uacfc\ubb3c\uc774 \ub3c4\ubbf8\ub178 \uad6c\uc870\uc640 \uc720\uc0ac\ud558\ub2e4\ub294 \uc810\uc5d0 \ucc29\uc548\ud558\uc5ec \uc2dc\uc791\ub418\uc5c8\uc2b5\ub2c8\ub2e4!","title":"\uc124\uacc4"},{"location":"example/event_storming/#_4","text":"\uc774\ubca4\ud2b8 \uc2a4\ud1a0\ubc0d \uacfc\uc815\uc744 \ud1b5\ud574 4\uac1c\uc758 \ub9c8\uc774\ud06c\ub85c \uc11c\ube44\uc2a4\uac00 \ub3c4\ucd9c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. Drive: \uc0ac\uc6a9\uc790\uc758 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \ucc98\ub9ac\ud558\uace0 \uad00\ub9ac\ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. VideoProcess: \uc5c5\ub85c\ub4dc\ub41c \uc601\uc0c1 \ud30c\uc77c\uc744 \uc2a4\ud2b8\ub9ac\ubc0d\ud654\ud558\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Indexer: \ud30c\uc77c \uc704\uce58 \ubc0f \uac80\uc0c9\uc744 \ub3d5\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4. Dashboard: \uc5ec\ub7ec \uc11c\ube44\uc2a4\uc5d0 \ud30c\ud3b8\ud654\ub41c \uc815\ubcf4\ub97c \ud55c \uacf3\uc5d0 \ubaa8\uc544 \ud655\uc778\ud560 \uc218 \uc788\ub3c4\ub85d \ub3d5\ub294 \uc11c\ube44\uc2a4\uc785\ub2c8\ub2e4.","title":"\uc124\uba85"},{"location":"example/event_storming/#_5","text":"\uac01\uac01\uc758 \uc11c\ube44\uc2a4\ub97c \uad6c\ud604\ud558\uae30 \uc804\uc5d0, Repository Pattern\uc774\ub780 \ubb34\uc5c7\uc778\uc9c0, Message\ub97c \uc804\ub2ec\ud558\uae30 \uc704\ud574\uc11c\ub294 \ubb34\uc5c7\uc774 \ud544\uc694\ud55c\uc9c0, \uac01 \ud504\ub85c\uc81d\ud2b8\uc5d0\uc11c \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub420 \uae30\ubcf8 \ud15c\ud50c\ub9bf\uc740 \uc5b4\ub5bb\uac8c \uad6c\uc131\ub418\ub294\uc9c0 \uc0b4\ud3b4\ubcf8 \ud6c4 \uad6c\ud604\uc744 \uc2dc\uc791\ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc55e\uc73c\ub85c"},{"location":"example/intro/","text":"Intro Pydomino\uc640 \ud568\uaed8 FastAPI, SQLAlchemy\ub97c \ud65c\uc6a9\ud558\uc5ec \ub2e8\uacc4\ubcc4\ub85c \uac04\ub2e8\ud55c Restful API \uc11c\ube44\uc2a4\ub97c \uc124\uacc4\ud574\ubd05\ub2c8\ub2e4.","title":"Intro"},{"location":"example/intro/#intro","text":"Pydomino\uc640 \ud568\uaed8 FastAPI, SQLAlchemy\ub97c \ud65c\uc6a9\ud558\uc5ec \ub2e8\uacc4\ubcc4\ub85c \uac04\ub2e8\ud55c Restful API \uc11c\ube44\uc2a4\ub97c \uc124\uacc4\ud574\ubd05\ub2c8\ub2e4.","title":"Intro"},{"location":"example/pub_sub/","text":"PubSub \uac01 MSA \uac04 \uba54\uc138\uc9c0\ub97c \uc8fc\uace0\ubc1b\uae30 \uc704\ud55c \uc544\ud0a4\ud14d\ucc98\uc5d0 \ub300\ud574 \uc124\uba85\ud569\ub2c8\ub2e4. \uadf8 \uc804\uc5d0, \uc9c0\ub09c Event Storming \uacfc\uc815\uc5d0\uc11c \ub3c4\ucd9c\ub41c \uc774\ubbf8\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uac00\uaca0\uc2b5\ub2c8\ub2e4. \uc0c1\ud669 \ud68c\uc0ac N\uce35\uc5d0 \uc62c\ub77c\uac11\ub2c8\ub2e4. \uc9e7\uc740 \ubcf5\ub3c4\ub97c \uc0ac\uc774\uc5d0 \ub450\uace0 \uc67c\ucabd\uc5d0\ub294 Drive \ud300 \uc0ac\ubb34\uc2e4\uacfc Indexer \ud300 \uc0ac\ubb34\uc2e4\uc774 \uc704\uce58\ud569\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 VideoProcesser \ud300 \uc0ac\ubb34\uc2e4\uacfc Dashboard \ud300 \uc0ac\ubb34\uc2e4\uc774 \uc704\uce58\ud569\ub2c8\ub2e4. Drive \ud300\uc740 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \ucc98\ub9ac\ud558\uace0\ub294 VideoProcesser, Indexer, Dashboard\uc5d0\uac8c FileUploaded \uba54\ubaa8\ub97c \uc9c1\uc811 \uc804\ub2ec\ud569\ub2c8\ub2e4. VideoProcesser \ud300\uc740 FileUploaded \uba54\ubaa8\ub97c \ubc1b\uc544 \ucc98\ub9ac\ud558\uace0\ub294 VideoProcessed \uba54\ubaa8\ub97c Dashboard \uc0ac\ubb34\uc2e4\uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. Indexer \ud300\uc740 FileUploaded \uba54\ubaa8\ub97c \ubc1b\uc544 \ucc98\ub9ac\ud558\uace0\ub294 Indexed \uba54\ubaa8\ub97c Dashboard \ud300\uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc544\uc9c1\uc740 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9cc\uc57d \uc0ac\ubb34\uc2e4\uc774 10\uac1c, 50\uac1c\ub97c \ub118\uc5b4 100\uac1c \uae4c\uc9c0 \ub298\uc5b4\ub09c\ub2e4\uace0 \uc0c1\uc0c1\ud574 \ubd05\uc2dc\ub2e4. Drive \ud300\uc5d0\uc11c FileUploaded \uba54\ubaa8\ub97c \uc804\ub2ec\ud574\uc57c \ud560 \ud300\uc758 \uac2f\uc218\uac00 40\uac1c\ub77c\uace0 \uac00\uc815\ud55c\ub2e4\uba74? \uc774\ub7ec\ud55c \uad00\uacc4\uac00 \uac01 \ud300\ub9c8\ub2e4 \uc874\uc7ac\ud55c\ub2e4\uba74? \uc5b4\ub290 \ub0a0 \uac11\uc790\uae30 \ud55c \uc0ac\ubb34\uc2e4\uc758 \ub3c4\uc5b4\ub77d\uc774 \uace0\uc7a5\ub098 \uc5f4\ub9ac\uc9c0 \uc54a\ub294\ub2e4\uba74? \uc5b4\ub5a4 \uc0ac\uc6d0\uc774 \uc2e4\uc218\ub85c\ub77c\ub3c4 \uba54\ubaa8\ub97c \uc783\uc5b4\ubc84\ub9b0\ub2e4\uba74? \ud574\uacb0\ubc95 \uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ubaa8\ub450 \uba38\ub9ac\ub97c \ub9de\ub300\uace0 \uc0dd\uac01\ud55c \ub05d\uc5d0 \ubcf5\ub3c4\uc5d0 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ub450\uae30\ub85c \uacb0\uc815\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud654\uc774\ud2b8 \ubcf4\ub4dc\uc758 \uc601\uc5ed\uc744 \ub098\ub204\uc5b4 \uc790\uc2e0\uc758 \ud300 \ub0b4\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uba54\ubaa8\ub97c \ubaa8\ub450 \uc21c\uc11c\ub300\ub85c \ubd99\uc5ec \ub193\uc2b5\ub2c8\ub2e4. Drive \ud300\uc774 \ud30c\uc77c \uc5c5\ub85c\ub4dc \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uace0 FileUploaded \uba54\ubaa8\ub97c \ud654\uc774\ud2b8\ubcf4\ub4dc\uc758 Drive \uc601\uc5ed\uc5d0 \ubd99\uc5ec \ub193\uc2b5\ub2c8\ub2e4. VideoProcesser \ud300 \uc911 \ud55c \uc778\uc6d0\uc774 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. Drive \uc601\uc5ed\uc5d0 FileUploaded \uba54\ubaa8\ub4e4\uc744 \uc0ac\uc9c4\uc73c\ub85c \ucc0d\uc5b4 VideoProcesser \uc0ac\ubb34\uc2e4\ub85c \uac00\uc838\uac11\ub2c8\ub2e4. VideoProcesser \ud300\uc774 \uc0ac\uc9c4\uc73c\ub85c \ucc0d\uc5b4 \uc628 \uba54\ubaa8\ub4e4\uc744 \ubaa8\ub450 \ucc98\ub9ac\ud558\uc600\uc2b5\ub2c8\ub2e4. \ud55c \uc778\uc6d0\uc744 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub85c \ubcf4\ub0b4, \ucc98\ub9ac\ud55c \uba54\ubaa8\ub4e4 \uc911 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9 \uba54\ubaa8 \uc624\ub978\ucabd\uc5d0 \"\uc5ec\uae30\uae4c\uc9c0 \ucc98\ub9ac\ud568 - video processer\"\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 VideoProcesser\ub294 \ud574\ub2f9 \uba54\ubaa8 \uc774\ud6c4\uc758 \uba54\ubaa8\ub4e4\uc744 \ucc98\ub9ac\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacfc\uc815\uc744 VideoProcesser, Indexer, Dashboard \ud300 \ub610\ud55c \uc218\ud589\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uad6c\uc870\uc758 \uc7a5\uc810\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uac01 \ud300\uc740 \uc11c\ub85c\uc758 \uc0ac\ubb34\uc2e4 \uc704\uce58\uc5d0 \ub300\ud574\uc11c \uc54c\uc9c0 \ubabb\ud558\ub354\ub77c\ub3c4 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ud1b5\ud574 \ud611\uc5c5 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\uc218\ub85c \uc778\ud574 \uba54\ubaa8\ub97c \uc783\uc5b4\ubc84\ub9b4 \uc5fc\ub824\uac00 \uc5c6\uc5b4\uc9d1\ub2c8\ub2e4. \ud68c\uc0ac \uaddc\ubaa8\uac00 \ucee4\uc9c0\uace0 \ud300\uc774 \ub9ce\uc544\uc9c0\ub354\ub77c\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \ud654\uc774\ud2b8 \ubcf4\ub4dc\uc758 \ud06c\uae30\uac00 \uc791\uc544\uc11c \ubb38\uc81c\uac00 \ub41c\ub2e4\uba74 \uc606\uc5d0 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ud558\ub098 \ub354 \ub193\uc73c\uba74 \ub429\ub2c8\ub2e4. N \ud300\uc758 \uc0ac\ubb34\uc2e4\uc758 \ub3c4\uc5b4\ub77d\uc774 \uace0\uc7a5\ub098\uc11c \uc791\uc5c5\uc774 \ubc00\ub838\ub2e4 \ud558\ub354\ub77c\ub3c4, \uc5b4\ub290 \uba54\ubaa8\uae4c\uc9c0 \ucc98\ub9ac\ud558\uc600\ub294\uc9c0 \uae30\ub85d\ud574 \ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc7ac\uac1c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb38\uc81c\uc810\ub4e4 \ub610\ud55c \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc0ac\ubb34\uc2e4 \ub0b4\uc758 \uc791\uc5c5\uc744 \ucc98\ub9ac\ub97c \ub2e4 \ub05d\ub9c8\uccd0\uac08 \ub54c \ucbe4 \uba54\ubaa8\ub97c \ud654\uc774\ud2b8\ubcf4\ub4dc\uc5d0 \ucd94\uac00\ud588\ub294\ub370, \uadf8 \uc0ac\uc774\uc5d0 \uc791\uc5c5\uc774 \uc2e4\ud328\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc0ac\uc9c4\uc744 \ucc0d\uc5b4 \uac04 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud588\ub294\ub370, \uae5c\ube61\ud558\uace0 \"\uc5ec\uae30\uae4c\uc9c0 \ucc98\ub9ac\ud568\" \uae30\ub85d\uc744 \ub0a8\uae30\uc9c0 \uc54a\uc544\uc11c \uc5ec\ub7ec \ubc88 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub2e8\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub4f1\uc7a5\ud55c Outbox/Inbox, \uba71\ub4f1 \ucc98\ub9ac \ub4f1\uc758 \uc5ec\ub7ec \ud574\uacb0 \ubc29\ubc95\uc774 \uc788\uc9c0\ub9cc \uc8fc\uc81c\uc5d0\uc11c \ubc97\uc5b4\ub098\uae30\uc5d0 \uc124\uba85\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4. Services \uc774\ub7ec\ud55c pub/sub \uad6c\uc870\ub97c \uc9c0\uc6d0\ud558\ub294 \uc5ec\ub7ec \uc11c\ube44\uc2a4\ub4e4\uc774 \uc788\uc73c\uba70 \ub300\ud45c\uc801\uc778 \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Apache Kafka \ub610\ub294 Pulsar RabbitMQ Streams Google Pub/Sub","title":"PubSub"},{"location":"example/pub_sub/#pubsub","text":"\uac01 MSA \uac04 \uba54\uc138\uc9c0\ub97c \uc8fc\uace0\ubc1b\uae30 \uc704\ud55c \uc544\ud0a4\ud14d\ucc98\uc5d0 \ub300\ud574 \uc124\uba85\ud569\ub2c8\ub2e4. \uadf8 \uc804\uc5d0, \uc9c0\ub09c Event Storming \uacfc\uc815\uc5d0\uc11c \ub3c4\ucd9c\ub41c \uc774\ubbf8\uc9c0\ub97c \uc0b4\ud3b4\ubcf4\uace0 \uac00\uaca0\uc2b5\ub2c8\ub2e4.","title":"PubSub"},{"location":"example/pub_sub/#_1","text":"\ud68c\uc0ac N\uce35\uc5d0 \uc62c\ub77c\uac11\ub2c8\ub2e4. \uc9e7\uc740 \ubcf5\ub3c4\ub97c \uc0ac\uc774\uc5d0 \ub450\uace0 \uc67c\ucabd\uc5d0\ub294 Drive \ud300 \uc0ac\ubb34\uc2e4\uacfc Indexer \ud300 \uc0ac\ubb34\uc2e4\uc774 \uc704\uce58\ud569\ub2c8\ub2e4. \uc624\ub978\ucabd\uc5d0\ub294 VideoProcesser \ud300 \uc0ac\ubb34\uc2e4\uacfc Dashboard \ud300 \uc0ac\ubb34\uc2e4\uc774 \uc704\uce58\ud569\ub2c8\ub2e4. Drive \ud300\uc740 \ud30c\uc77c \uc5c5\ub85c\ub4dc\ub97c \ucc98\ub9ac\ud558\uace0\ub294 VideoProcesser, Indexer, Dashboard\uc5d0\uac8c FileUploaded \uba54\ubaa8\ub97c \uc9c1\uc811 \uc804\ub2ec\ud569\ub2c8\ub2e4. VideoProcesser \ud300\uc740 FileUploaded \uba54\ubaa8\ub97c \ubc1b\uc544 \ucc98\ub9ac\ud558\uace0\ub294 VideoProcessed \uba54\ubaa8\ub97c Dashboard \uc0ac\ubb34\uc2e4\uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. Indexer \ud300\uc740 FileUploaded \uba54\ubaa8\ub97c \ubc1b\uc544 \ucc98\ub9ac\ud558\uace0\ub294 Indexed \uba54\ubaa8\ub97c Dashboard \ud300\uc5d0 \uc804\ub2ec\ud569\ub2c8\ub2e4. \uc544\uc9c1\uc740 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub9cc\uc57d \uc0ac\ubb34\uc2e4\uc774 10\uac1c, 50\uac1c\ub97c \ub118\uc5b4 100\uac1c \uae4c\uc9c0 \ub298\uc5b4\ub09c\ub2e4\uace0 \uc0c1\uc0c1\ud574 \ubd05\uc2dc\ub2e4. Drive \ud300\uc5d0\uc11c FileUploaded \uba54\ubaa8\ub97c \uc804\ub2ec\ud574\uc57c \ud560 \ud300\uc758 \uac2f\uc218\uac00 40\uac1c\ub77c\uace0 \uac00\uc815\ud55c\ub2e4\uba74? \uc774\ub7ec\ud55c \uad00\uacc4\uac00 \uac01 \ud300\ub9c8\ub2e4 \uc874\uc7ac\ud55c\ub2e4\uba74? \uc5b4\ub290 \ub0a0 \uac11\uc790\uae30 \ud55c \uc0ac\ubb34\uc2e4\uc758 \ub3c4\uc5b4\ub77d\uc774 \uace0\uc7a5\ub098 \uc5f4\ub9ac\uc9c0 \uc54a\ub294\ub2e4\uba74? \uc5b4\ub5a4 \uc0ac\uc6d0\uc774 \uc2e4\uc218\ub85c\ub77c\ub3c4 \uba54\ubaa8\ub97c \uc783\uc5b4\ubc84\ub9b0\ub2e4\uba74?","title":"\uc0c1\ud669"},{"location":"example/pub_sub/#_2","text":"\uc774\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ubaa8\ub450 \uba38\ub9ac\ub97c \ub9de\ub300\uace0 \uc0dd\uac01\ud55c \ub05d\uc5d0 \ubcf5\ub3c4\uc5d0 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ub450\uae30\ub85c \uacb0\uc815\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud654\uc774\ud2b8 \ubcf4\ub4dc\uc758 \uc601\uc5ed\uc744 \ub098\ub204\uc5b4 \uc790\uc2e0\uc758 \ud300 \ub0b4\uc5d0\uc11c \ubc1c\uc0dd\ud55c \uba54\ubaa8\ub97c \ubaa8\ub450 \uc21c\uc11c\ub300\ub85c \ubd99\uc5ec \ub193\uc2b5\ub2c8\ub2e4. Drive \ud300\uc774 \ud30c\uc77c \uc5c5\ub85c\ub4dc \uc791\uc5c5\uc744 \ucc98\ub9ac\ud558\uace0 FileUploaded \uba54\ubaa8\ub97c \ud654\uc774\ud2b8\ubcf4\ub4dc\uc758 Drive \uc601\uc5ed\uc5d0 \ubd99\uc5ec \ub193\uc2b5\ub2c8\ub2e4. VideoProcesser \ud300 \uc911 \ud55c \uc778\uc6d0\uc774 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \uc0b4\ud3b4\ubd05\ub2c8\ub2e4. Drive \uc601\uc5ed\uc5d0 FileUploaded \uba54\ubaa8\ub4e4\uc744 \uc0ac\uc9c4\uc73c\ub85c \ucc0d\uc5b4 VideoProcesser \uc0ac\ubb34\uc2e4\ub85c \uac00\uc838\uac11\ub2c8\ub2e4. VideoProcesser \ud300\uc774 \uc0ac\uc9c4\uc73c\ub85c \ucc0d\uc5b4 \uc628 \uba54\ubaa8\ub4e4\uc744 \ubaa8\ub450 \ucc98\ub9ac\ud558\uc600\uc2b5\ub2c8\ub2e4. \ud55c \uc778\uc6d0\uc744 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub85c \ubcf4\ub0b4, \ucc98\ub9ac\ud55c \uba54\ubaa8\ub4e4 \uc911 \uac00\uc7a5 \ub9c8\uc9c0\ub9c9 \uba54\ubaa8 \uc624\ub978\ucabd\uc5d0 \"\uc5ec\uae30\uae4c\uc9c0 \ucc98\ub9ac\ud568 - video processer\"\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. \uc774\ud6c4 VideoProcesser\ub294 \ud574\ub2f9 \uba54\ubaa8 \uc774\ud6c4\uc758 \uba54\ubaa8\ub4e4\uc744 \ucc98\ub9ac\ud558\uba74 \ub429\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacfc\uc815\uc744 VideoProcesser, Indexer, Dashboard \ud300 \ub610\ud55c \uc218\ud589\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uad6c\uc870\uc758 \uc7a5\uc810\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uac01 \ud300\uc740 \uc11c\ub85c\uc758 \uc0ac\ubb34\uc2e4 \uc704\uce58\uc5d0 \ub300\ud574\uc11c \uc54c\uc9c0 \ubabb\ud558\ub354\ub77c\ub3c4 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ud1b5\ud574 \ud611\uc5c5 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\uc218\ub85c \uc778\ud574 \uba54\ubaa8\ub97c \uc783\uc5b4\ubc84\ub9b4 \uc5fc\ub824\uac00 \uc5c6\uc5b4\uc9d1\ub2c8\ub2e4. \ud68c\uc0ac \uaddc\ubaa8\uac00 \ucee4\uc9c0\uace0 \ud300\uc774 \ub9ce\uc544\uc9c0\ub354\ub77c\ub3c4 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \ud654\uc774\ud2b8 \ubcf4\ub4dc\uc758 \ud06c\uae30\uac00 \uc791\uc544\uc11c \ubb38\uc81c\uac00 \ub41c\ub2e4\uba74 \uc606\uc5d0 \ud654\uc774\ud2b8\ubcf4\ub4dc\ub97c \ud558\ub098 \ub354 \ub193\uc73c\uba74 \ub429\ub2c8\ub2e4. N \ud300\uc758 \uc0ac\ubb34\uc2e4\uc758 \ub3c4\uc5b4\ub77d\uc774 \uace0\uc7a5\ub098\uc11c \uc791\uc5c5\uc774 \ubc00\ub838\ub2e4 \ud558\ub354\ub77c\ub3c4, \uc5b4\ub290 \uba54\ubaa8\uae4c\uc9c0 \ucc98\ub9ac\ud558\uc600\ub294\uc9c0 \uae30\ub85d\ud574 \ub193\uc558\uae30 \ub54c\ubb38\uc5d0 \uc7ac\uac1c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb38\uc81c\uc810\ub4e4 \ub610\ud55c \uc874\uc7ac\ud569\ub2c8\ub2e4. \uc0ac\ubb34\uc2e4 \ub0b4\uc758 \uc791\uc5c5\uc744 \ucc98\ub9ac\ub97c \ub2e4 \ub05d\ub9c8\uccd0\uac08 \ub54c \ucbe4 \uba54\ubaa8\ub97c \ud654\uc774\ud2b8\ubcf4\ub4dc\uc5d0 \ucd94\uac00\ud588\ub294\ub370, \uadf8 \uc0ac\uc774\uc5d0 \uc791\uc5c5\uc774 \uc2e4\ud328\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc0ac\uc9c4\uc744 \ucc0d\uc5b4 \uac04 \uc791\uc5c5\uc744 \ucc98\ub9ac\ud588\ub294\ub370, \uae5c\ube61\ud558\uace0 \"\uc5ec\uae30\uae4c\uc9c0 \ucc98\ub9ac\ud568\" \uae30\ub85d\uc744 \ub0a8\uae30\uc9c0 \uc54a\uc544\uc11c \uc5ec\ub7ec \ubc88 \ucc98\ub9ac\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub2e8\uc810\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub4f1\uc7a5\ud55c Outbox/Inbox, \uba71\ub4f1 \ucc98\ub9ac \ub4f1\uc758 \uc5ec\ub7ec \ud574\uacb0 \ubc29\ubc95\uc774 \uc788\uc9c0\ub9cc \uc8fc\uc81c\uc5d0\uc11c \ubc97\uc5b4\ub098\uae30\uc5d0 \uc124\uba85\ud558\uc9c0 \uc54a\uaca0\uc2b5\ub2c8\ub2e4.","title":"\ud574\uacb0\ubc95"},{"location":"example/pub_sub/#services","text":"\uc774\ub7ec\ud55c pub/sub \uad6c\uc870\ub97c \uc9c0\uc6d0\ud558\ub294 \uc5ec\ub7ec \uc11c\ube44\uc2a4\ub4e4\uc774 \uc788\uc73c\uba70 \ub300\ud45c\uc801\uc778 \uac83\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. Apache Kafka \ub610\ub294 Pulsar RabbitMQ Streams Google Pub/Sub","title":"Services"},{"location":"example/repository_pattern/","text":"Repository \uc758\ubbf8 Repository \ud328\ud134\uc740 2004\ub144 \ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4\uc5d0\uc11c \ucc98\uc74c\uc73c\ub85c \ub4f1\uc7a5\ud55c \uac1c\ub150\uc785\ub2c8\ub2e4. \uac00\uc815 User\ub97c \ub2e4\ub8e8\ub294 \uc5b4\ub5a4 \uc0c1\uc0c1 \uc18d\uc758 \uc11c\ube44\uc2a4\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \uc11c\ubc84\uc758 \uba54\ubaa8\ub9ac\uac00 \ubb34\ud55c\ud558\uace0, \uc11c\ubc84\uac00 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub420 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4\uba74 \uc11c\ube44\uc2a4\ub294 \ub2e4\uc74c\ucc98\ub7fc \uc124\uacc4\ub420 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. from dataclasses import dataclass UserName = str @dataclass class User : username : str password : str users : dict [ UserName , User ] = {} def get ( username : str ) -> User | None : return users . get ( username , None ) def edit_password ( username : str , new_password : str ) -> None : user = users . get ( username , None ) assert user user . password = new_password def post ( username : str , password : str ): assert username not in users user = User ( username , password ) users [ user . username ] = user \uc704\uc758 \ucf54\ub4dc \uc608\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ud30c\uc774\uc36c\uc758 \uae30\ubcf8 \uc790\ub8cc\ud615\uc778 Dictionary\ub97c \ud1b5\ud574 User \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud604\uc2e4\uc801\uc73c\ub85c\ub294 \ubd88\uac00\ub2a5\ud55c \uc0ac\ub840\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 Database \ub610\ub294 File \ud615\ud0dc\ub85c \uc601\uc18d\ud654\ud558\uc5ec \uc815\ubcf4\uac00 \uc190\uc2e4\ub418\ub294 \uc77c\uc744 \ubc29\uc9c0\ud574\uc57c \ud569\ub2c8\ub2e4. Repository \ud328\ud134\uc740 \uc800\uc218\uc900\uacfc \uace0\uc218\uc900 \uc0ac\uc774\uc5d0 \uac1d\uccb4\ub97c \uc601\uc18d\ud654 \ud560 \ub54c \ud65c\uc6a9\ud560 \uceec\ub809\uc158 \ud615\ud0dc\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub460\uc73c\ub85c\uc368 \uc2dc\uc791\ub429\ub2c8\ub2e4. \uc704\uc758 \uc608\uc81c\uc5d0 Repository \ud328\ud134\uc744 \ub3c4\uc785\ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uacc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol UserName = str @dataclass class User : username : str password : str class UserRepository ( Protocol ): def get ( self , username : UserName ) -> User | None : ... def add ( self , user : User ) -> None : ... def delete ( self , user : User ) -> None : ... class InMemoryUserRepository ( UserRepository ): def __init__ ( self ) -> None : self . _users : dict [ UserName , User ] = {} def get ( self , username : UserName ) -> User | None : return self . _users . get ( username , None ) def add ( self , user : User ) -> None : assert user . username not in self . _users self . _users [ user . username ] = user def delete ( self , user : User ) -> None : del self . _users [ user . username ] users = InMemoryUserRepository () def get ( username : str ) -> User | None : return users . get ( username ) def edit_password ( username : str , new_password : str ) -> None : user = users . get ( username ) assert user user . password = new_password def post ( username : str , password : str ): user = User ( username , password ) users . add ( user ) \ud544\uc694\uc131 \ub808\ud3ec\uc9c0\ud1a0\ub9ac \ud328\ud134\uc758 \ub3c4\uc785 \uc5ec\ubd80\uc5d0 \ub530\ub978 \uc7a5\ub2e8\uc810\uc744 \ube44\uad50\ud574\ubd05\uc2dc\ub2e4. \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc800\uc218\uc900\uc5d0 \ub300\ud55c \uc138\ubd80\uc0ac\ud56d\uc740 \uc228\uaca8\uc9d1\ub2c8\ub2e4. \uc5b4\ub5a4 \uc601\uc18d\ud654 \ubc29\uc2dd\uc744 \uc120\ud0dd\ud558\ub4e0 \uc0c1\uad00\uc5c6\uc774 \uc800\uc218\uc900\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \uad6c\ud604\ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uac1c\ubc1c \ub3c4\uc911 \uac1d\uccb4\ub97c \ud45c\ud604\ud568\uc5d0 \uc788\uc5b4 \uad00\uacc4\ud615\ubcf4\ub2e4 \uadf8\ub798\ud504\ud615 DB\uac00 \ub354 \uc62c\ubc14\ub978 \uc120\ud0dd\uc774\uc5c8\ub2e4\ub294 \uc810\uc744 \uae68\ub2ec\uc558\ub2e4\uace0 \uc0dd\uac01\ud574 \ubd05\uc2dc\ub2e4. \uc800\uc218\uc900\uc5d0 \uc758\uc874\uc801\uc778 \ucf54\ub4dc\uc600\ub2e4\uba74 \ub300\uaddc\ubaa8\uc758 \ucf54\ub4dc \ubcc0\uacbd\uc774 \ubc1c\uc0dd\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 Repository\ub97c \uc0ac\uc6a9\ud588\ub2e4\uba74 Repository \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \uad6c\ud604\ud558\ub294 \uac83\uc73c\ub85c \ub300\ucc98\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc21c\uc218\ud55c \ub3c4\uba54\uc778 \uac1d\uccb4\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\uba54\uc778 \uac1d\uccb4\ub97c \uc124\uacc4\ud560 \ub54c ORM\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 Base \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544\uc57c \ud558\ub294 \ub4f1\uc758 \uc81c\uc57d\uc0ac\ud56d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc815\uc758\ud558\uace0 \ud65c\uc6a9\ud568\uc73c\ub85c\uc368 \uc800\uc218\uc900\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uace0\ub3c4 \ud14c\uc2a4\ud2b8 \ub85c\uc9c1\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \uc601\uc18d\ud654 \ubc29\uc2dd\uc740 \uc774\ubbf8 \ub300\ubd80\ubd84 Repository\uc640 \uc720\uc0ac\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ubcf4\uc720\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uad73\uc774 Repository\ub97c \ub3c4\uc785\ud558\uc5ec \ubcf5\uc7a1\ub3c4\ub97c \ub192\uc774\uace0 \uc2f6\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc601\uc18d\ud654 \ubc29\uc2dd\uc740 \uc11c\ube44\uc2a4 \uacc4\ud68d \ub2e8\uacc4\ubd80\ud130 \uc2e0\uc911\ud558\uac8c \uc120\ud0dd\ub420 \uac83\uc774\uba70, \ubcc0\uacbd\ub420 \uac00\ub2a5\uc131\uc740 \uc5c6\ub2e4\uace0 \uc0dd\uac01\ud574\ub3c4 \ubb34\ubc29\ud560 \uc815\ub3c4\ub85c \ub0ae\uc2b5\ub2c8\ub2e4. \uacb0\uad6d, \uc0c1\ud669\uc5d0 \ub530\ub77c \ub2e4\ub978 \uc120\ud0dd\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc55e\uc73c\ub85c \uc9c4\ud589\ub420 \uc608\uc81c\uc5d0\uc11c\ub294 Repository \ud328\ud134\uc744 \ud65c\uc6a9\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"Repository"},{"location":"example/repository_pattern/#repository","text":"","title":"Repository"},{"location":"example/repository_pattern/#_1","text":"Repository \ud328\ud134\uc740 2004\ub144 \ub3c4\uba54\uc778 \uc8fc\ub3c4 \uc124\uacc4\uc5d0\uc11c \ucc98\uc74c\uc73c\ub85c \ub4f1\uc7a5\ud55c \uac1c\ub150\uc785\ub2c8\ub2e4.","title":"\uc758\ubbf8"},{"location":"example/repository_pattern/#_2","text":"User\ub97c \ub2e4\ub8e8\ub294 \uc5b4\ub5a4 \uc0c1\uc0c1 \uc18d\uc758 \uc11c\ube44\uc2a4\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud574\ubd05\uc2dc\ub2e4. \uc11c\ubc84\uc758 \uba54\ubaa8\ub9ac\uac00 \ubb34\ud55c\ud558\uace0, \uc11c\ubc84\uac00 \ube44\uc815\uc0c1\uc801\uc73c\ub85c \uc885\ub8cc\ub420 \uac00\ub2a5\uc131\uc774 \uc5c6\ub2e4\uba74 \uc11c\ube44\uc2a4\ub294 \ub2e4\uc74c\ucc98\ub7fc \uc124\uacc4\ub420 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. from dataclasses import dataclass UserName = str @dataclass class User : username : str password : str users : dict [ UserName , User ] = {} def get ( username : str ) -> User | None : return users . get ( username , None ) def edit_password ( username : str , new_password : str ) -> None : user = users . get ( username , None ) assert user user . password = new_password def post ( username : str , password : str ): assert username not in users user = User ( username , password ) users [ user . username ] = user \uc704\uc758 \ucf54\ub4dc \uc608\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uba74 \ud30c\uc774\uc36c\uc758 \uae30\ubcf8 \uc790\ub8cc\ud615\uc778 Dictionary\ub97c \ud1b5\ud574 User \uc815\ubcf4\ub97c \uc800\uc7a5\ud558\uace0 \uad00\ub9ac\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ud604\uc2e4\uc801\uc73c\ub85c\ub294 \ubd88\uac00\ub2a5\ud55c \uc0ac\ub840\uc785\ub2c8\ub2e4. \uc6b0\ub9ac\ub294 Database \ub610\ub294 File \ud615\ud0dc\ub85c \uc601\uc18d\ud654\ud558\uc5ec \uc815\ubcf4\uac00 \uc190\uc2e4\ub418\ub294 \uc77c\uc744 \ubc29\uc9c0\ud574\uc57c \ud569\ub2c8\ub2e4. Repository \ud328\ud134\uc740 \uc800\uc218\uc900\uacfc \uace0\uc218\uc900 \uc0ac\uc774\uc5d0 \uac1d\uccb4\ub97c \uc601\uc18d\ud654 \ud560 \ub54c \ud65c\uc6a9\ud560 \uceec\ub809\uc158 \ud615\ud0dc\uc758 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub460\uc73c\ub85c\uc368 \uc2dc\uc791\ub429\ub2c8\ub2e4. \uc704\uc758 \uc608\uc81c\uc5d0 Repository \ud328\ud134\uc744 \ub3c4\uc785\ud55c\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uacc4\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol UserName = str @dataclass class User : username : str password : str class UserRepository ( Protocol ): def get ( self , username : UserName ) -> User | None : ... def add ( self , user : User ) -> None : ... def delete ( self , user : User ) -> None : ... class InMemoryUserRepository ( UserRepository ): def __init__ ( self ) -> None : self . _users : dict [ UserName , User ] = {} def get ( self , username : UserName ) -> User | None : return self . _users . get ( username , None ) def add ( self , user : User ) -> None : assert user . username not in self . _users self . _users [ user . username ] = user def delete ( self , user : User ) -> None : del self . _users [ user . username ] users = InMemoryUserRepository () def get ( username : str ) -> User | None : return users . get ( username ) def edit_password ( username : str , new_password : str ) -> None : user = users . get ( username ) assert user user . password = new_password def post ( username : str , password : str ): user = User ( username , password ) users . add ( user )","title":"\uac00\uc815"},{"location":"example/repository_pattern/#_3","text":"\ub808\ud3ec\uc9c0\ud1a0\ub9ac \ud328\ud134\uc758 \ub3c4\uc785 \uc5ec\ubd80\uc5d0 \ub530\ub978 \uc7a5\ub2e8\uc810\uc744 \ube44\uad50\ud574\ubd05\uc2dc\ub2e4.","title":"\ud544\uc694\uc131"},{"location":"example/repository_pattern/#_4","text":"\uc800\uc218\uc900\uc5d0 \ub300\ud55c \uc138\ubd80\uc0ac\ud56d\uc740 \uc228\uaca8\uc9d1\ub2c8\ub2e4. \uc5b4\ub5a4 \uc601\uc18d\ud654 \ubc29\uc2dd\uc744 \uc120\ud0dd\ud558\ub4e0 \uc0c1\uad00\uc5c6\uc774 \uc800\uc218\uc900\uc740 \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \uad6c\ud604\ub420 \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uac1c\ubc1c \ub3c4\uc911 \uac1d\uccb4\ub97c \ud45c\ud604\ud568\uc5d0 \uc788\uc5b4 \uad00\uacc4\ud615\ubcf4\ub2e4 \uadf8\ub798\ud504\ud615 DB\uac00 \ub354 \uc62c\ubc14\ub978 \uc120\ud0dd\uc774\uc5c8\ub2e4\ub294 \uc810\uc744 \uae68\ub2ec\uc558\ub2e4\uace0 \uc0dd\uac01\ud574 \ubd05\uc2dc\ub2e4. \uc800\uc218\uc900\uc5d0 \uc758\uc874\uc801\uc778 \ucf54\ub4dc\uc600\ub2e4\uba74 \ub300\uaddc\ubaa8\uc758 \ucf54\ub4dc \ubcc0\uacbd\uc774 \ubc1c\uc0dd\ud560 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 Repository\ub97c \uc0ac\uc6a9\ud588\ub2e4\uba74 Repository \uc778\ud130\ud398\uc774\uc2a4\ub97c \ub9cc\uc871\ud558\ub3c4\ub85d \uad6c\ud604\ud558\ub294 \uac83\uc73c\ub85c \ub300\ucc98\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc21c\uc218\ud55c \ub3c4\uba54\uc778 \uac1d\uccb4\ub97c \uc720\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub3c4\uba54\uc778 \uac1d\uccb4\ub97c \uc124\uacc4\ud560 \ub54c ORM\uc5d0\uc11c \ub3d9\uc791\ud558\ub294 Base \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\uc544\uc57c \ud558\ub294 \ub4f1\uc758 \uc81c\uc57d\uc0ac\ud56d\uc774 \uc5c6\uc2b5\ub2c8\ub2e4. \uba54\ubaa8\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ud14c\uc2a4\ud2b8\uc6a9 \ub808\ud3ec\uc9c0\ud1a0\ub9ac\ub97c \uc815\uc758\ud558\uace0 \ud65c\uc6a9\ud568\uc73c\ub85c\uc368 \uc800\uc218\uc900\uc5d0 \uc758\uc874\ud558\uc9c0 \uc54a\uace0\ub3c4 \ud14c\uc2a4\ud2b8 \ub85c\uc9c1\uc744 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.","title":"\uc0ac\uc6a9\ud55c\ub2e4\uba74"},{"location":"example/repository_pattern/#_5","text":"\uc601\uc18d\ud654 \ubc29\uc2dd\uc740 \uc774\ubbf8 \ub300\ubd80\ubd84 Repository\uc640 \uc720\uc0ac\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub97c \ubcf4\uc720\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uad73\uc774 Repository\ub97c \ub3c4\uc785\ud558\uc5ec \ubcf5\uc7a1\ub3c4\ub97c \ub192\uc774\uace0 \uc2f6\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc601\uc18d\ud654 \ubc29\uc2dd\uc740 \uc11c\ube44\uc2a4 \uacc4\ud68d \ub2e8\uacc4\ubd80\ud130 \uc2e0\uc911\ud558\uac8c \uc120\ud0dd\ub420 \uac83\uc774\uba70, \ubcc0\uacbd\ub420 \uac00\ub2a5\uc131\uc740 \uc5c6\ub2e4\uace0 \uc0dd\uac01\ud574\ub3c4 \ubb34\ubc29\ud560 \uc815\ub3c4\ub85c \ub0ae\uc2b5\ub2c8\ub2e4. \uacb0\uad6d, \uc0c1\ud669\uc5d0 \ub530\ub77c \ub2e4\ub978 \uc120\ud0dd\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc55e\uc73c\ub85c \uc9c4\ud589\ub420 \uc608\uc81c\uc5d0\uc11c\ub294 Repository \ud328\ud134\uc744 \ud65c\uc6a9\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.","title":"\uc0ac\uc6a9\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74"},{"location":"tutorial/block/","text":"Block Block\uc740 \ub3c4\ubbf8\ub178\uc5d0 \ubc30\uce58\ub418\ub294 \ud558\ub098\uc758 \ube14\ub7ed\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. \uc815\uc758 pydomino.Block\uc744 \uc0c1\uc18d\ud558\uace0, \ub3d9\uae30 \ub610\ub294 \ube44\ub3d9\uae30 fall_down \uba54\uc11c\ub4dc\ub97c \uc791\uc131\ud55c \ubaa8\ub4e0 \uac1d\uccb4\ub97c Block\uc73c\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from pydomino import Block class FooBlock ( Block ): ... type hint\ub97c \ud1b5\ud574 Block\uc744 \uc0c1\uc18d\ud55c \uac1d\uccb4\uc5d0 fall_down\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. Block\uc744 \uc815\uc758\ud558\ub294 \uad8c\uc7a5\ub418\ub294 \ubc29\ubc95\uc740 python\uc758 dataclasses\ub97c \ud65c\uc6a9\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. from uuid import UUID from pydomino import Block from dataclasses import dataclass , field @dataclass ( kw_only = True , slots = True , frozen = True ) # 1 class FooBlock ( Block ): some : bool required : int data : str = field ( default_factory = lambda : \"\" ) def fall_down ( self ): # need work... ... \ud574\ub2f9 \uac1d\uccb4\ub294 \uc778\uc790\ub97c \ubaa8\ub450 keyword \uc778\uc790\ub85c \uc694\uad6c\ud558\uba70, slots\uac00 \uc9c0\uc815\ub418\uc5b4 some, required, data\uac00 \uc544\ub2cc \ub2e4\ub978 \uc18d\uc131\uc740 \ubcf4\uc720\ud560 \uc218 \uc5c6\uace0, frozen\ud558\uc5ec \uac1d\uccb4 \uc0dd\uc131 \ud6c4 \uc18d\uc131\uc744 \ubcc0\uacbd\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. Fall Down fall_down \uba54\uc11c\ub4dc\ub294 \ub3d9\uae30 \ub610\ub294 \ube44\ub3d9\uae30\ub85c \uc791\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc758\uc874\ud558\ub294 \uc778\uc790\ub97c \uc704\uce58 \ub610\ub294 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. pydomino.touch \ud568\uc218\ub97c \ud65c\uc6a9\ud574 \ub2e4\uc74c \ubc88 \uc4f0\ub7ec\uc9c8 Block\uc744 \uc608\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc81c \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. from typing import Protocol from pydomino import Block , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... class FirstBlock ( Block ): data : str def fall_down ( self , printer : IPrinter ): # 1 printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) # 2 class SecondBlock ( Block ): data : str async def fall_down ( self ): # 3 ...","title":"Block"},{"location":"tutorial/block/#block","text":"Block\uc740 \ub3c4\ubbf8\ub178\uc5d0 \ubc30\uce58\ub418\ub294 \ud558\ub098\uc758 \ube14\ub7ed\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4.","title":"Block"},{"location":"tutorial/block/#_1","text":"pydomino.Block\uc744 \uc0c1\uc18d\ud558\uace0, \ub3d9\uae30 \ub610\ub294 \ube44\ub3d9\uae30 fall_down \uba54\uc11c\ub4dc\ub97c \uc791\uc131\ud55c \ubaa8\ub4e0 \uac1d\uccb4\ub97c Block\uc73c\ub85c \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. from pydomino import Block class FooBlock ( Block ): ... type hint\ub97c \ud1b5\ud574 Block\uc744 \uc0c1\uc18d\ud55c \uac1d\uccb4\uc5d0 fall_down\uc774 \uc815\uc758\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc74c\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. Block\uc744 \uc815\uc758\ud558\ub294 \uad8c\uc7a5\ub418\ub294 \ubc29\ubc95\uc740 python\uc758 dataclasses\ub97c \ud65c\uc6a9\ud558\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. from uuid import UUID from pydomino import Block from dataclasses import dataclass , field @dataclass ( kw_only = True , slots = True , frozen = True ) # 1 class FooBlock ( Block ): some : bool required : int data : str = field ( default_factory = lambda : \"\" ) def fall_down ( self ): # need work... ... \ud574\ub2f9 \uac1d\uccb4\ub294 \uc778\uc790\ub97c \ubaa8\ub450 keyword \uc778\uc790\ub85c \uc694\uad6c\ud558\uba70, slots\uac00 \uc9c0\uc815\ub418\uc5b4 some, required, data\uac00 \uc544\ub2cc \ub2e4\ub978 \uc18d\uc131\uc740 \ubcf4\uc720\ud560 \uc218 \uc5c6\uace0, frozen\ud558\uc5ec \uac1d\uccb4 \uc0dd\uc131 \ud6c4 \uc18d\uc131\uc744 \ubcc0\uacbd\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.","title":"\uc815\uc758"},{"location":"tutorial/block/#fall-down","text":"fall_down \uba54\uc11c\ub4dc\ub294 \ub3d9\uae30 \ub610\ub294 \ube44\ub3d9\uae30\ub85c \uc791\uc131\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc758\uc874\ud558\ub294 \uc778\uc790\ub97c \uc704\uce58 \ub610\ub294 \ud0a4\uc6cc\ub4dc \uc778\uc790\ub85c \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. pydomino.touch \ud568\uc218\ub97c \ud65c\uc6a9\ud574 \ub2e4\uc74c \ubc88 \uc4f0\ub7ec\uc9c8 Block\uc744 \uc608\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uc81c \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. from typing import Protocol from pydomino import Block , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... class FirstBlock ( Block ): data : str def fall_down ( self , printer : IPrinter ): # 1 printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) # 2 class SecondBlock ( Block ): data : str async def fall_down ( self ): # 3 ...","title":"Fall Down"},{"location":"tutorial/domino/","text":"Domino Domino\ub294 \ube14\ub7ed\uc774 \uc904\uc9c0\uc5b4 \ub298\uc5b4\uc120 \ub3c4\ubbf8\ub178 \uad6c\uc870\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. \uc815\uc758 pydomino.Domino\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol from pydomino import Block , Domino , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... @dataclass ( kw_only = True , frozen = True , slots = True ) class FirstBlock ( Block ): data : str def fall_down ( self , printer : IPrinter ): printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) @dataclass ( kw_only = True , frozen = True , slots = True ) class SecondBlock ( Block ): data : str async def fall_down ( self ): print ( f \"Second Block : { self . data } \" ) domino = Domino () place \uba54\uc11c\ub4dc | def place(self, block_type, args, * kwargs) -> None Domino\uc758 place \uba54\uc11c\ub4dc\ub294 \ube14\ub7ed\uc774 \uc704\uce58\ud560 \uacf5\uac04\uc744 Domino\uc5d0 \ubc30\uce58\ud558\ub294 \ud589\uc704\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. domino . place ( SecondBlock ) FirstBlock\uc758 fall_down \uba54\uc11c\ub4dc\ub294 printer\ub77c\ub294 \uc778\uc790\ub97c \ud544\uc694\ub85c \ud569\ub2c8\ub2e4. place \uba54\uc11c\ub4dc\ub294 \ube14\ub7ed\uc744 \uc704\uce58\uc2dc\ud0b4\uacfc \ub3d9\uc2dc\uc5d0 \ud574\ub2f9 \ube14\ub7ed\uc774 \uc694\uad6c\ud558\ub294 \uc704\uce58 \ubc0f \ud0a4\uc6cc\ub4dc \uc778\uc790\ub97c \ud568\uaed8 \uc694\uad6c\ud569\ub2c8\ub2e4. type hint \uae30\ub2a5\uc744 \ud1b5\ud574 \uc5b4\ub5a4 \uc778\uc790\uac00 \ub204\ub77d\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol from pydomino import Block , Domino , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... @dataclass ( kw_only = True , frozen = True , slots = True ) class FirstBlock ( Block ): data : str async def fall_down ( self , printer : IPrinter ): printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) @dataclass ( kw_only = True , frozen = True , slots = True ) class SecondBlock ( Block ): data : str async def fall_down ( self ): ... domino = Domino () class SomePrinter ( IPrinter ): def print ( self , s : str ): print ( s ) some_printer = SomePrinter () domino . place ( FirstBlock , printer = some_printer ) domino . place ( SecondBlock ) start \uba54\uc11c\ub4dc | async def start(self, block, return_effect: bool = False) -> Result | tuple[Result, Effect] Domino\uc758 start \uba54\uc11c\ub4dc\ub294 \ub3c4\ubbf8\ub178\uc758 \ud2b9\uc815 \ube14\ub7ed\uc744 \uac74\ub4dc\ub824 \uc5f0\uc18d\ub41c \ub3d9\uc791\uc744 \uc2dc\uc791\ud558\ub294 \ud589\uc704\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. start \uba54\uc11c\ub4dc\ub294 return_effect\uc758 \uac12\uc5d0 \ub530\ub77c \ub450 \uac00\uc9c0 Return \ud615\ud0dc\ub97c \ubcf4\uc720\ud569\ub2c8\ub2e4. async def start(self, block, return_effect = False) -> Result async def start(self, block, return_effect = True) -> tuple[Result, Effect] Result\ub294 start \uba54\uc11c\ub4dc\uc5d0 \uc804\ub2ec\ub41c block\uc758 fall_down \uba54\uc11c\ub4dc \ubc18\ud658 \ud0c0\uc785\uc785\ub2c8\ub2e4. Effect \ub3c4\ubbf8\ub178 \ube14\ub7ed\uc758 \uc5f0\uc18d\uc801\uc778 \ub3d9\uc791\uc744 \ub450 \uac00\uc9c0\ub85c \uad6c\ubd84\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \" Do \": \uc9c1\uc811\uc801\uc73c\ub85c start\uc5d0 \uc804\ub2ec\ub41c Block\uc774 \uc4f0\ub7ec\uc9c0\ub294 \ub3d9\uc791 \" Effect \": \uc774\ud6c4 touch\ub418\uc5b4 \uc5f0\uacc4\ub418\ub294 \ub3d9\uc791 Pydomino\uc5d0\uc11c effect\ub294 Future \uac1d\uccb4\ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. test.py import asyncio from dataclasses import dataclass from pydomino import Block , Domino , touch @dataclass ( kw_only = True , frozen = True , slots = True ) class ReturnOneBlock ( Block ): async def fall_down ( self ) -> int : touch ( ReturnTwoBlock ()) print ( \"Fall down ReturnOneBlock.\" ) return 1 @dataclass ( kw_only = True , frozen = True , slots = True ) class ReturnTwoBlock ( Block ): async def fall_down ( self ) -> int : print ( \"Fall down ReturnTwoBlock.\" ) return 2 domino = Domino () domino . place ( ReturnOneBlock ) domino . place ( ReturnTwoBlock ) async def main (): print ( \"main: start!\" ) result , effect = await domino . start ( ReturnOneBlock (), return_effect = True ) print ( f \"main: result is { result } \" ) print ( \"main: before effect\" ) await effect print ( \"main: after effect\" ) asyncio . run ( main ()) $ python test.py main: start! Fall down ReturnOneBlock. main: result is 1 main: before effect Fall down ReturnTwoBlock. main: after effect Type Hint start \uba54\uc11c\ub4dc\uac00 \ubc18\ud658\ud558\ub294 \uac12\uc758 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc81c\uacf5\ub429\ub2c8\ub2e4. Exception \uc804\ud30c Domino \uad6c\uc870\uc5d0\uc11c Exception\uc5d0 \ub300\ud574 \ubc18\ub4dc\uc2dc \uc9da\uace0 \uac00\uc57c \ud560 \ubd80\ubd84\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. start \uba54\uc11c\ub4dc\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ub41c \ube14\ub7ed\uc758 fall_down \ub3d9\uc791 \uc911\uc5d0 \ubc1c\uc0dd\ud55c \uc608\uc678\ub294 \ud638\ucd9c\ubd80 \uae4c\uc9c0 \uc804\ud30c\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098, Effect \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\ub294 \ubb34\uc2dc\ub429\ub2c8\ub2e4 . \uc758\ub3c4\uc801\uc73c\ub85c \uc774\uc640 \uac19\uc774 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ub41c Block\uc758 \ub3d9\uc791\uc740 \ud544\uc218\uc801, Do \uc778 \uac83\uc73c\ub85c \uc5ec\uaca8 \ud638\ucd9c\ubd80\uae4c\uc9c0 \uc608\uc678\ub97c \uc804\ud30c\ud558\uace0, \ud574\ub2f9 \ub3d9\uc791\uc73c\ub85c \uc778\ud574 \ud6c4\uc18d\ub418\ub294 \ub3d9\uc791\uc740 \uac04\uc811\uc801, Effect \uc778 \uac83\uc73c\ub85c \uc5ec\uaca8 \ud638\ucd9c\ubd80\uc5d0 \uc608\uc678\ub97c \uc804\ud30c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. Hook \uba54\uc11c\ub4dc Domino\uc5d0\ub294 \uc138 \uac00\uc9c0 \ube44\ub3d9\uae30 \ud6c5 \uba54\uc11c\ub4dc\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4. (pre_fall_down, post_fall_down, exception_fall_down) \uc544\ub798 \uc608\uc81c\ub97c \ub3d9\uc791\uc2dc\ud0a8 \uacb0\uacfc\ub97c \ud1b5\ud574 \ub3d9\uc791\uc744 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import asyncio from dataclasses import dataclass , field from typing import Any , Iterable from uuid import UUID , uuid4 from pydomino import Block , Domino , touch @dataclass ( kw_only = True , frozen = True , slots = True ) class First ( Block ): id : UUID = field ( default_factory = uuid4 ) async def fall_down ( self ) -> int : touch ( Second ()) return 1 @dataclass ( kw_only = True , frozen = True , slots = True ) class Second ( Block ): id : UUID = field ( default_factory = uuid4 ) async def fall_down ( self ) -> int : raise Exception () class LogDomino ( Domino ): async def pre_fall_down ( self , block : Block ): print ( \" \\n \" . join ( ( \"[Pre]\" , f \"block: { block } \" , ) ) + \" \\n \" ) async def post_fall_down ( self , block : Block , result : Any , touched_blocks : Iterable [ Block ] ): print ( \" \\n \" . join ( ( \"[Post]\" , f \"block: { block } \" , f \"result: { result } \" , f \"touched_blocks: { touched_blocks } \" , ) ) + \" \\n \" ) async def exception_fall_down ( self , block : Block , exc : Exception ): print ( \" \\n \" . join ( ( \"[Exception]\" , f \"block: { block } \" , f \"exc: { exc . __class__ } \" , ) ) + \" \\n \" ) domino = LogDomino () domino . place ( First ) domino . place ( Second ) async def main (): await domino . start ( First ()) asyncio . run ( main ()) $ python test.py [Pre] block: First(id=UUID('a8503e8b-42da-4b5e-853f-e4d6c4a1d754')) [Post] block: First(id=UUID('a8503e8b-42da-4b5e-853f-e4d6c4a1d754')) result: 1 touched_blocks: {Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317'))} [Pre] block: Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317')) [Exception] block: Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317')) exc: <class 'Exception'>","title":"Domino"},{"location":"tutorial/domino/#domino","text":"Domino\ub294 \ube14\ub7ed\uc774 \uc904\uc9c0\uc5b4 \ub298\uc5b4\uc120 \ub3c4\ubbf8\ub178 \uad6c\uc870\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4.","title":"Domino"},{"location":"tutorial/domino/#_1","text":"pydomino.Domino\uc758 \uc778\uc2a4\ud134\uc2a4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol from pydomino import Block , Domino , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... @dataclass ( kw_only = True , frozen = True , slots = True ) class FirstBlock ( Block ): data : str def fall_down ( self , printer : IPrinter ): printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) @dataclass ( kw_only = True , frozen = True , slots = True ) class SecondBlock ( Block ): data : str async def fall_down ( self ): print ( f \"Second Block : { self . data } \" ) domino = Domino ()","title":"\uc815\uc758"},{"location":"tutorial/domino/#place","text":"| def place(self, block_type, args, * kwargs) -> None Domino\uc758 place \uba54\uc11c\ub4dc\ub294 \ube14\ub7ed\uc774 \uc704\uce58\ud560 \uacf5\uac04\uc744 Domino\uc5d0 \ubc30\uce58\ud558\ub294 \ud589\uc704\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. domino . place ( SecondBlock ) FirstBlock\uc758 fall_down \uba54\uc11c\ub4dc\ub294 printer\ub77c\ub294 \uc778\uc790\ub97c \ud544\uc694\ub85c \ud569\ub2c8\ub2e4. place \uba54\uc11c\ub4dc\ub294 \ube14\ub7ed\uc744 \uc704\uce58\uc2dc\ud0b4\uacfc \ub3d9\uc2dc\uc5d0 \ud574\ub2f9 \ube14\ub7ed\uc774 \uc694\uad6c\ud558\ub294 \uc704\uce58 \ubc0f \ud0a4\uc6cc\ub4dc \uc778\uc790\ub97c \ud568\uaed8 \uc694\uad6c\ud569\ub2c8\ub2e4. type hint \uae30\ub2a5\uc744 \ud1b5\ud574 \uc5b4\ub5a4 \uc778\uc790\uac00 \ub204\ub77d\ub418\uc5c8\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. from dataclasses import dataclass from typing import Protocol from pydomino import Block , Domino , touch class IPrinter ( Protocol ): def print ( self , __text : str ): ... @dataclass ( kw_only = True , frozen = True , slots = True ) class FirstBlock ( Block ): data : str async def fall_down ( self , printer : IPrinter ): printer . print ( self . data ) touch ( SecondBlock ( data = self . data )) @dataclass ( kw_only = True , frozen = True , slots = True ) class SecondBlock ( Block ): data : str async def fall_down ( self ): ... domino = Domino () class SomePrinter ( IPrinter ): def print ( self , s : str ): print ( s ) some_printer = SomePrinter () domino . place ( FirstBlock , printer = some_printer ) domino . place ( SecondBlock )","title":"place \uba54\uc11c\ub4dc"},{"location":"tutorial/domino/#start","text":"| async def start(self, block, return_effect: bool = False) -> Result | tuple[Result, Effect] Domino\uc758 start \uba54\uc11c\ub4dc\ub294 \ub3c4\ubbf8\ub178\uc758 \ud2b9\uc815 \ube14\ub7ed\uc744 \uac74\ub4dc\ub824 \uc5f0\uc18d\ub41c \ub3d9\uc791\uc744 \uc2dc\uc791\ud558\ub294 \ud589\uc704\uc5d0 \ube44\uc720\ub429\ub2c8\ub2e4. start \uba54\uc11c\ub4dc\ub294 return_effect\uc758 \uac12\uc5d0 \ub530\ub77c \ub450 \uac00\uc9c0 Return \ud615\ud0dc\ub97c \ubcf4\uc720\ud569\ub2c8\ub2e4. async def start(self, block, return_effect = False) -> Result async def start(self, block, return_effect = True) -> tuple[Result, Effect] Result\ub294 start \uba54\uc11c\ub4dc\uc5d0 \uc804\ub2ec\ub41c block\uc758 fall_down \uba54\uc11c\ub4dc \ubc18\ud658 \ud0c0\uc785\uc785\ub2c8\ub2e4.","title":"start \uba54\uc11c\ub4dc"},{"location":"tutorial/domino/#effect","text":"\ub3c4\ubbf8\ub178 \ube14\ub7ed\uc758 \uc5f0\uc18d\uc801\uc778 \ub3d9\uc791\uc744 \ub450 \uac00\uc9c0\ub85c \uad6c\ubd84\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \" Do \": \uc9c1\uc811\uc801\uc73c\ub85c start\uc5d0 \uc804\ub2ec\ub41c Block\uc774 \uc4f0\ub7ec\uc9c0\ub294 \ub3d9\uc791 \" Effect \": \uc774\ud6c4 touch\ub418\uc5b4 \uc5f0\uacc4\ub418\ub294 \ub3d9\uc791 Pydomino\uc5d0\uc11c effect\ub294 Future \uac1d\uccb4\ub85c \uad6c\ud604\ub429\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud65c\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. test.py import asyncio from dataclasses import dataclass from pydomino import Block , Domino , touch @dataclass ( kw_only = True , frozen = True , slots = True ) class ReturnOneBlock ( Block ): async def fall_down ( self ) -> int : touch ( ReturnTwoBlock ()) print ( \"Fall down ReturnOneBlock.\" ) return 1 @dataclass ( kw_only = True , frozen = True , slots = True ) class ReturnTwoBlock ( Block ): async def fall_down ( self ) -> int : print ( \"Fall down ReturnTwoBlock.\" ) return 2 domino = Domino () domino . place ( ReturnOneBlock ) domino . place ( ReturnTwoBlock ) async def main (): print ( \"main: start!\" ) result , effect = await domino . start ( ReturnOneBlock (), return_effect = True ) print ( f \"main: result is { result } \" ) print ( \"main: before effect\" ) await effect print ( \"main: after effect\" ) asyncio . run ( main ()) $ python test.py main: start! Fall down ReturnOneBlock. main: result is 1 main: before effect Fall down ReturnTwoBlock. main: after effect","title":"Effect"},{"location":"tutorial/domino/#type-hint","text":"start \uba54\uc11c\ub4dc\uac00 \ubc18\ud658\ud558\ub294 \uac12\uc758 \ud0c0\uc785 \ud78c\ud2b8\uac00 \uc81c\uacf5\ub429\ub2c8\ub2e4.","title":"Type Hint"},{"location":"tutorial/domino/#exception","text":"Domino \uad6c\uc870\uc5d0\uc11c Exception\uc5d0 \ub300\ud574 \ubc18\ub4dc\uc2dc \uc9da\uace0 \uac00\uc57c \ud560 \ubd80\ubd84\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4. start \uba54\uc11c\ub4dc\uc5d0 \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ub41c \ube14\ub7ed\uc758 fall_down \ub3d9\uc791 \uc911\uc5d0 \ubc1c\uc0dd\ud55c \uc608\uc678\ub294 \ud638\ucd9c\ubd80 \uae4c\uc9c0 \uc804\ud30c\ub429\ub2c8\ub2e4. \uadf8\ub7ec\ub098, Effect \uacfc\uc815\uc5d0\uc11c \ubc1c\uc0dd\ud558\ub294 \uc608\uc678\ub294 \ubb34\uc2dc\ub429\ub2c8\ub2e4 . \uc758\ub3c4\uc801\uc73c\ub85c \uc774\uc640 \uac19\uc774 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc9c1\uc811\uc801\uc73c\ub85c \uc804\ub2ec\ub41c Block\uc758 \ub3d9\uc791\uc740 \ud544\uc218\uc801, Do \uc778 \uac83\uc73c\ub85c \uc5ec\uaca8 \ud638\ucd9c\ubd80\uae4c\uc9c0 \uc608\uc678\ub97c \uc804\ud30c\ud558\uace0, \ud574\ub2f9 \ub3d9\uc791\uc73c\ub85c \uc778\ud574 \ud6c4\uc18d\ub418\ub294 \ub3d9\uc791\uc740 \uac04\uc811\uc801, Effect \uc778 \uac83\uc73c\ub85c \uc5ec\uaca8 \ud638\ucd9c\ubd80\uc5d0 \uc608\uc678\ub97c \uc804\ud30c\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.","title":"Exception \uc804\ud30c"},{"location":"tutorial/domino/#hook","text":"Domino\uc5d0\ub294 \uc138 \uac00\uc9c0 \ube44\ub3d9\uae30 \ud6c5 \uba54\uc11c\ub4dc\uac00 \uc874\uc7ac\ud569\ub2c8\ub2e4. (pre_fall_down, post_fall_down, exception_fall_down) \uc544\ub798 \uc608\uc81c\ub97c \ub3d9\uc791\uc2dc\ud0a8 \uacb0\uacfc\ub97c \ud1b5\ud574 \ub3d9\uc791\uc744 \ud655\uc778\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. import asyncio from dataclasses import dataclass , field from typing import Any , Iterable from uuid import UUID , uuid4 from pydomino import Block , Domino , touch @dataclass ( kw_only = True , frozen = True , slots = True ) class First ( Block ): id : UUID = field ( default_factory = uuid4 ) async def fall_down ( self ) -> int : touch ( Second ()) return 1 @dataclass ( kw_only = True , frozen = True , slots = True ) class Second ( Block ): id : UUID = field ( default_factory = uuid4 ) async def fall_down ( self ) -> int : raise Exception () class LogDomino ( Domino ): async def pre_fall_down ( self , block : Block ): print ( \" \\n \" . join ( ( \"[Pre]\" , f \"block: { block } \" , ) ) + \" \\n \" ) async def post_fall_down ( self , block : Block , result : Any , touched_blocks : Iterable [ Block ] ): print ( \" \\n \" . join ( ( \"[Post]\" , f \"block: { block } \" , f \"result: { result } \" , f \"touched_blocks: { touched_blocks } \" , ) ) + \" \\n \" ) async def exception_fall_down ( self , block : Block , exc : Exception ): print ( \" \\n \" . join ( ( \"[Exception]\" , f \"block: { block } \" , f \"exc: { exc . __class__ } \" , ) ) + \" \\n \" ) domino = LogDomino () domino . place ( First ) domino . place ( Second ) async def main (): await domino . start ( First ()) asyncio . run ( main ()) $ python test.py [Pre] block: First(id=UUID('a8503e8b-42da-4b5e-853f-e4d6c4a1d754')) [Post] block: First(id=UUID('a8503e8b-42da-4b5e-853f-e4d6c4a1d754')) result: 1 touched_blocks: {Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317'))} [Pre] block: Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317')) [Exception] block: Second(id=UUID('3e7877d4-cf3c-4145-bd44-5052852c2317')) exc: <class 'Exception'>","title":"Hook \uba54\uc11c\ub4dc"}]}